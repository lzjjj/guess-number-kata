package tw.core;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import tw.core.exception.OutOfGuessCountException;
import tw.core.generator.AnswerGenerator;
import tw.core.model.GuessResult;

import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.Is.is;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class GameTest {

    private final Answer actualAnswer = Answer.createAnswer("1 2 3 4");
    private Game game;

    @BeforeEach
    public void setUp() throws Exception {
        AnswerGenerator answerGenerator = mock(AnswerGenerator.class);
        when(answerGenerator.generate()).thenReturn(actualAnswer);
        game = new Game(answerGenerator);
    }


    @Test
    public void should_get_the_success_status_when_guess_input_is_correct() throws Exception {

        //given
//        excuteSuccessGuess();
        GuessResult guess = game.guess(Answer.createAnswer("1 2 3 4"));
        //when
        //then
        assertThat(guess.getResult(), is("4A0B"));

    }
    @Test
    public void should_get_success_status_when_guess_input_is_correct() throws Exception {
        GuessResult guess1 = game.guess(Answer.createAnswer("1 2 3 4"));

        //when
        //then
        assertThat( game.checkStatus(),is( "success" ) );
    }
    @Test
    public void should_get_fail_status_when_guess_input_is_not_correct() throws Exception {
        GuessResult guess1 = game.guess(Answer.createAnswer("7 8 9 0"));
        GuessResult guess2 = game.guess(Answer.createAnswer("3 4 2 1"));
        GuessResult guess3 = game.guess(Answer.createAnswer("5 2 8 9"));
        GuessResult guess4 = game.guess(Answer.createAnswer("7 8 9 0"));
        GuessResult guess5 = game.guess(Answer.createAnswer("3 4 2 1"));
        GuessResult guess6 = game.guess(Answer.createAnswer("5 2 8 9"));
        //when
        //then
        assertThat( game.checkStatus(),is( "fail" ) );
    }
    @Test
    public void should_get_continue_status_when_guess_input_is_not_correct() throws Exception {
        GuessResult guess = game.guess(Answer.createAnswer("7 8 9 0"));

        //when
        //then
        assertThat( game.checkStatus(),is( "continue" ) );
    }
    @Test
    public void should_return_guessHistory_when_guessHistory_input_is_guess() throws Exception {
        GuessResult guess1 = game.guess(Answer.createAnswer("7 8 9 0"));
        GuessResult guess2 = game.guess(Answer.createAnswer("3 1 5 8"));
        //when
        //then
        assertThat( game.guessHistory().get( 0 ),is( guess1 ) );
        assertThat( game.guessHistory().get( 1 ),is( guess2 ) );
    }
    @Test
    public void should_return_continue_when_checkCoutinue_input_is_guess() throws Exception {
        GuessResult guess1 = game.guess(Answer.createAnswer("7 8 9 0"));

        //when
        //then
        assertThat( game.checkCoutinue(),is( true ) );
    }
    @Test
    public void should_return_OutOfGuessCountException_when_guess_input_is_guessResults_over_6() throws Exception {
        GuessResult guess0 = game.guess(Answer.createAnswer("7 8 9 0"));
        GuessResult guess1 = game.guess(Answer.createAnswer("7 8 9 0"));
        GuessResult guess2 = game.guess(Answer.createAnswer("3 4 2 1"));
        GuessResult guess3 = game.guess(Answer.createAnswer("5 2 8 9"));
        GuessResult guess4 = game.guess(Answer.createAnswer("7 8 9 0"));
        GuessResult guess5 = game.guess(Answer.createAnswer("3 4 2 1"));
        //when
        //then
        try {
            GuessResult guess6 = game.guess(Answer.createAnswer("5 2 8 9"));
            fail("it should fail");
        }catch(OutOfGuessCountException e){

        }

    }


}
